import pandas as pd

from sklearn.preprocessing import KBinsDiscretizer
from sklearn.compose import ColumnTransformer

import config

TARGET = config.VAR_CLASSIF
MISSING_TAG = '_miss'

FEATS_CATEGORICAL = config.VARS_CATEGORICAL.keys()

FEATS_CONTINUOUS = config.VARS_CONTINUOUS
N_BINS_CONTINUOUS = 10
BINNING_CONTINUOUS = 'quantile'

FEATS_DISCRETE = config.VARS_ORDINAL
BINNING_DISCRETE = 'uniform'

N_BINS_BINARY = 2  # obviously :-)
BINNING_BINARY = 'uniform'


def discretize(df_in, leave_continuous):
    feat_names = df_in.columns

    discretizers = []
    for feat in feat_names:
        if feat == TARGET:
            # target variable for classification, already discrete by nature
            transf = (feat, 'passthrough', [feat])

        elif feat.endswith(MISSING_TAG):
            # generated by the imputer's missing indication, already discrete (binary) by construction
            transf = (feat, 'passthrough', [feat])

        elif any([feat.startswith(f_categ) for f_categ in FEATS_CATEGORICAL]):
            # generated by the categorical one-hot encoder, already discrete (binary) by construction
            transf = (feat, 'passthrough', [feat])

        elif any([feat.startswith(f_cont) for f_cont in FEATS_CONTINUOUS]):  # continuous
            if leave_continuous:  # continuous variables remain as they are, no discretization
                transf = (feat, 'passthrough', [feat])
            else:
                n_bins = N_BINS_CONTINUOUS
                discret = KBinsDiscretizer(n_bins=n_bins, encode='ordinal', strategy=BINNING_CONTINUOUS)
                transf = (feat, discret, [feat])

        elif feat in FEATS_DISCRETE.keys():  # discrete, non-binary
            n_bins = FEATS_DISCRETE[feat]
            discret = KBinsDiscretizer(n_bins=n_bins, encode='ordinal', strategy=BINNING_DISCRETE)
            transf = (feat, discret, [feat])

        else:  # binary
            n_bins = N_BINS_BINARY
            discret = KBinsDiscretizer(n_bins=n_bins, encode='ordinal', strategy=BINNING_BINARY)
            transf = (feat, discret, [feat])

        discretizers.append(transf)
    discretizer = ColumnTransformer(discretizers)

    # apply discretization
    X_out = discretizer.fit_transform(df_in)

    # build dataframe
    df_out = pd.DataFrame(data=X_out, columns=feat_names, dtype=int)

    return df_out, discretizer
